// Generated by CoffeeScript 1.6.3
var AWS, Pusher, colors, fs, fsu, mime, s3;

fs = require("fs");

fsu = require("fs-util");

s3 = require("s3");

mime = require("mime");

AWS = require("aws-sdk");

colors = require('colors');

Pusher = (function() {
    Pusher.prototype.ACCESS_KEY = "";

    Pusher.prototype.SECRET_KEY = "";

    Pusher.prototype.BUCKET = "";

    Pusher.prototype.total = 0;

    Pusher.prototype.uploaded = 0;

    Pusher.prototype.files = [];

    function Pusher(ACCESS_KEY, SECRET_KEY, BUCKET) {
        this.ACCESS_KEY = ACCESS_KEY;
        this.SECRET_KEY = SECRET_KEY;
        this.BUCKET = BUCKET;
        AWS.config.update({
            accessKeyId: this.ACCESS_KEY,
            secretAccessKey: this.SECRET_KEY
        });
        this.aws = new AWS.S3({
            params: {
                Bucket: this.BUCKET
            }
        });
    }

    Pusher.prototype.initialize = function(callback) {
        var _this = this;
        return this.aws.listBuckets(function(err, data) {
            var bucket, exists, _i, _len, _ref;
            exists = false;
            _ref = data.Buckets;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                bucket = _ref[_i];
                if (bucket.Name === _this.BUCKET) {
                    exists = true;
                }
            }
            if (exists) {
                return callback();
            } else {
                return _this.create(callback);
            }
        });
    };

    Pusher.prototype.create = function(callback) {
        console.log("Creating bucket...".green);
        return this.aws.createBucket({
            Bucket: this.BUCKET
        }, callback);
    };

    Pusher.prototype.push = function(dir, re) {
        var _this = this;
        console.log("Uploading files!".green);
        this.ls(dir, null, this.files);
        this.total = this.files.length;
        return this.initialize(function() {
            var file, _i, _len, _ref, _results;
            _this.client = s3.createClient({
                key: _this.ACCESS_KEY,
                secret: _this.SECRET_KEY,
                bucket: _this.BUCKET
            });
            _ref = _this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                _results.push(_this.upload(file.file, re, file.type));
            }
            return _results;
        });
    };

    Pusher.prototype.upload = function(file, re, type) {
        var header, uploader;
        header = {
            'Content-Type': type,
            'x-amz-acl': 'public-read'
        };
        uploader = this.client.upload(file, file.replace(re, ''), header);
        uploader.on("error", function(err) {
            return console.log(("Unable to upload: " + err.stack).red);
        });
        uploader.on("progress", function(amountDone, amountTotal) {
            return console.log(("Progress: " + amountDone + " of " + amountTotal).yellow);
        });
        return uploader.on("end", function(url) {
            console.log(("File avaliable at: " + url).green);
            if (++this.uploaded >= this.total) {
                return process.exit(1);
            }
        });
    };

    Pusher.prototype.ls = function(dir, filter, files) {
        var file, fls, type, _i, _len;
        fls = fsu.ls(dir);
        for (_i = 0, _len = fls.length; _i < _len; _i++) {
            file = fls[_i];
            if (fs.lstatSync(file).isDirectory()) {
                this.ls(file, null, files);
            } else {
                type = mime.lookup(file);
                if (filter) {
                    if (filter.test(file)) {
                        files.push({
                            file: file,
                            type: type
                        });
                    }
                } else {
                    files.push({
                        file: file,
                        type: type
                    });
                }
            }
        }
        return files;
    };

    return Pusher;

})();

module.exports = Pusher;
